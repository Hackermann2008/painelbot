# Arquivo: main.py
# Importante: Crie um arquivo .python-version com "3.12.4" na raiz do seu reposit√≥rio no Render
# para garantir compatibilidade com python-telegram-bot==20.6

import os
import asyncio
import aiohttp # Nova importa√ß√£o para fazer requisi√ß√µes HTTP
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
import telegram.ext
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

# --- Configura√ß√µes ---
BOT_TOKEN = "8440160263:AAHU1gp6F_kZN9OQp1KLC3_Yz0oY8Krsgs4" # Ou use os.environ.get("BOT_TOKEN")

# URL base do seu servi√ßo no Render (Render a define automaticamente)
WEBHOOK_URL_BASE = os.environ.get("RENDER_EXTERNAL_URL")
if not WEBHOOK_URL_BASE:
    # Para desenvolvimento local, voc√™ precisaria de um t√∫nel (ngrok, etc.)
    WEBHOOK_URL_BASE = "https://seu-servico-webhook.onrender.com" # Substitua pelo seu URL real no Render

# Caminho do webhook (ajuda a isolar seu bot)
WEBHOOK_URL_PATH = f"/{BOT_TOKEN}/"
WEBHOOK_URL = f"{WEBHOOK_URL_BASE}{WEBHOOK_URL_PATH}"
SELF_PING_URL = WEBHOOK_URL # URL para o pr√≥prio servi√ßo se "pingar"

# Porta que o Render espera que o servi√ßo escute
PORT = int(os.environ.get('PORT', 8000)) # 8000 √© uma porta comum, Render usa $PORT

# Intervalo de keep-alive em segundos (ex: 600 = 10 minutos)
KEEP_ALIVE_INTERVAL = int(os.environ.get('KEEP_ALIVE_INTERVAL', 600))

# --- Handlers (fun√ß√µes do bot) ---
# Etapa 1: Boas-vindas
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ Ver o que o Painel faz", callback_data="ver_painel")],
        [InlineKeyboardButton("2Ô∏è‚É£ Saber o pre√ßo", callback_data="saber_preco")],
        [InlineKeyboardButton("3Ô∏è‚É£ Falar com o suporte", callback_data="suporte")],
        [InlineKeyboardButton("4Ô∏è‚É£ Sair", callback_data="sair")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    
    # Determina se √© um comando /start ou uma callback query
    if update.message:
        # Vindo do comando /start
        await update.message.reply_text(
            "üíª Seja bem-vindo ao BOT OFICIAL do *PAINEL DO SOMBRA V4.7*\n\n"
            "‚ö†Ô∏è Aqui n√£o √© lugar pra curiosos. Se voc√™ chegou at√© aqui, √© porque quer poder, anonimato e controle.\n\n"
            "üëá Me diga o que voc√™ quer:",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    elif update.callback_query:
        # Vindo de um bot√£o "Voltar pro in√≠cio"
        await update.callback_query.answer() # Importante para fechar o "bot√£o carregando"
        await update.callback_query.edit_message_text(
            "üíª Seja bem-vindo ao BOT OFICIAL do *PAINEL DO SOMBRA V4.7*\n\n"
            "‚ö†Ô∏è Aqui n√£o √© lugar pra curiosos. Se voc√™ chegou at√© aqui, √© porque quer poder, anonimato e controle.\n\n"
            "üëá Me diga o que voc√™ quer:",
            reply_markup=markup,
            parse_mode="Markdown"
        )

# Etapa 2: Apresenta√ß√£o do produto
async def ver_painel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # Importante para fechar o "bot√£o carregando"
    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ Quero saber o valor direto", callback_data="saber_preco")],
        [InlineKeyboardButton("2Ô∏è‚É£ Voltar", callback_data="start")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üß† O Painel do Sombra V4.7 n√£o √© brinquedo.\n"
        "Ele √© um painel privado com fun√ß√µes exclusivas pra quem quer hackear o sistema sem ser rastreado.\n\n"
        "‚öôÔ∏è O que ele faz:\n"
        "‚úÖ Gerador de dados e CCs\n"
        "‚úÖ Validador autom√°tico\n"
        "‚úÖ Acesso a consultas privadas\n"
        "‚úÖ Integra√ß√£o com sites de venda\n"
        "‚úÖ Seguran√ßa de IP com camadas de prote√ß√£o\n\n"
        "‚ö° Atualiza√ß√µes mensais\n"
        "üîí Suporte 24h\n"
        "üî• Vers√£o atual: V4.7",
        reply_markup=markup
    )

# Etapa 3: Pre√ßo e escassez
async def saber_preco(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # Importante para fechar o "bot√£o carregando"
    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ Quero comprar agora", callback_data="comprar")],
        [InlineKeyboardButton("2Ô∏è‚É£ Falar com suporte antes", callback_data="suporte")],
        [InlineKeyboardButton("3Ô∏è‚É£ Voltar pro in√≠cio", callback_data="start")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üí• OFERTA LIMITADA:\n\n"
        "O Painel do Sombra V4.7 est√° sendo liberado por:\n"
        "üì¶ R$ 35 (acesso vital√≠cio)\n\n"
        "üö´ Ap√≥s as 20 c√≥pias vendidas dessa vers√£o, ele ser√° fechado novamente.\n\n"
        "‚úÖ Pagamento via Pix ou Cripto\n\n"
        "Deseja garantir sua c√≥pia agora?",
        reply_markup=markup
    )

# Etapa 4: Link de pagamento direto
async def comprar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # Importante para fechar o "bot√£o carregando"
    # N√£o precisa de teclado aqui, √© uma mensagem final
    await query.edit_message_text(
        "üßæ Para efetuar o pagamento, acesse o link abaixo:\n"
        "üëâ https://pay.sunize.com.br/gbKjfVgy \n\n"
        "‚ö†Ô∏è Ap√≥s o pagamento, o acesso ser√° liberado automaticamente."
    )

# Suporte (WhatsApp)
async def suporte(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # Importante para fechar o "bot√£o carregando"
    # N√£o precisa de teclado aqui, √© uma mensagem final
    await query.edit_message_text(
        "üìû Para falar com o suporte, clique no link abaixo:\n"
        "üëâ https://wa.me/553591418188/?text=duvida/painel"
    )

# Manipulador de todos os bot√µes
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "start":
        # Reenvia a mensagem de boas-vindas
        await start(update, context)
    elif data == "ver_painel":
        await ver_painel(update, context)
    elif data == "saber_preco":
        await saber_preco(update, context)
    elif data == "comprar":
        await comprar(update, context)
    elif data == "suporte":
        await suporte(update, context)
    elif data == "sair":
        query = update.callback_query
        await query.answer() # Importante
        await query.edit_message_text("üëã At√© logo!")

# --- Fun√ß√£o de Keep-Alive ---
async def keep_alive_task():
    """Tarefa ass√≠ncrona que envia um ping para si mesma a cada intervalo."""
    await asyncio.sleep(10) # Pequeno atraso inicial para garantir que o servidor esteja pronto
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                # Faz uma requisi√ß√£o GET simples para o pr√≥prio endpoint do webhook
                async with session.get(SELF_PING_URL, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                    logging.info(f"[Keep-Alive] Ping enviado para {SELF_PING_URL}. Status: {resp.status}")
            except Exception as e:
                logging.error(f"[Keep-Alive] Erro ao enviar ping: {e}")
            
            # Aguarda o intervalo definido antes do pr√≥ximo ping
            await asyncio.sleep(KEEP_ALIVE_INTERVAL)

# --- Configura√ß√£o e Inicializa√ß√£o do Webhook ---
async def set_webhook_on_start(application: telegram.ext.Application):
    """Configura o webhook quando o bot inicia."""
    success = await application.bot.set_webhook(WEBHOOK_URL)
    if success:
        print(f"‚úÖ Webhook configurado com sucesso em {WEBHOOK_URL}")
        # Inicia a tarefa de keep-alive ap√≥s o webhook ser configurado
        asyncio.create_task(keep_alive_task())
    else:
        print(f"‚ùå Falha ao configurar o webhook em {WEBHOOK_URL}")

def main():
    """Configura e inicia o bot em modo webhook."""
    # Configura√ß√£o b√°sica de logging
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # Cria a aplica√ß√£o
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Registra os handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # Configura o webhook ap√≥s a inicializa√ß√£o
    application.post_init = set_webhook_on_start

    # Inicia o servidor web para receber os webhooks
    print(f"üöÄ Iniciando servidor webhook na porta {PORT}...")
    application.run_webhook(
        listen="0.0.0.0",         # Escuta em todas as interfaces de rede
        port=PORT,                # Usa a porta definida pelo Render
        url_path=WEBHOOK_URL_PATH, # Caminho da URL do webhook
        webhook_url=WEBHOOK_URL   # URL completa do webhook
    )

if __name__ == '__main__':
    main()
    
